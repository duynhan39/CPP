// Duy Nhan Cao
// CS215
// File: date.cpp

#include <iostream>
#include <cstdlib>
#include <sstream>
#include <cassert>
#include <stdexcept>
#include <cassert>
#include "date.h"
#include <string>

using namespace std;
// Check if a date is valid
// Return true if it is, false if it is not
bool valid(int m, int d, int y)
{
  bool leap_y=false;
  if(y<0 || d<0 || m<0 || m>12)
    return false;
  // Check if that is a leap year
  if((y%4==0 && y%100!=0) || y%400==0)
    leap_y=true;
  if((m<8 && m%2==1) || (m>7 && m%2==0))
  {
    if(d>31)
      return false;
  }
  else
    if(d>30)
      return false;
  if(m==2 && leap_y==true && d>29)
    return false;
  if(m==2 && leap_y==false && d>28)
    return false;
  
  return true;
}
// Explicit value constructor: mm/dd/yyyy
// Class invariant - something that must alway be true for all objects of the type
Date::Date(int m, int d, int y)
{
  mm=m;
  dd=d;
  yyyy=y;
  reduce();
}

// Function: month
// Returns: month of the date
int Date::month() const
{
   return mm;
}

// Function: day
// Returns: day of the date
int Date::day() const
{
   return dd;
}

// Function: year
// Returns: year of the date
int Date::year() const
{
   return yyyy;
}
// Function: string_name
// Return: string name of date
string Date::string_name() const
{
  string const month[]={ "January",
		   "February",
		   "March",
		   "April",
		   "May",
		   "June",
		   "July",
		   "August",
		   "September",
		   "October",
		   "November",
		   "December"};
  ostringstream ostr;
  ostr << month[mm-1] << ' ' << dd << ", " << yyyy;
  
  return ostr.str(); 
}

// Function: day_of_week
// Return: name of the day
string Date::day_of_week() const
{
  int y2=yyyy;
  if(mm<3)
    y2--;
  int a=(mm+9)%12+1;
  int b=dd;
  int c=y2%100;
  int d=y2/100;

  int w=(13*a-1)/5;
  int x=c/4;
  int y=d/4;
  int z=w+x+y+b+c-2*d;
  int r=z%7;
  
  if(r<0)
    r+=7;
  string day_name[]={"Sunday",
		   "Monday",
		   "Tuesday",
		   "Wednesday",
		   "Thursday",
		   "Friday",
		   "Saturday"};
  
   return day_name[r];	      
}
// Operator: ==, < , <= , > , >= , !=
// Return: T/F
bool operator== (const Date & lhs, const Date & rhs)
{
  if(lhs.dd==rhs.dd && lhs.mm==rhs.mm && lhs.yyyy==rhs.yyyy)
    return true;
  return false;
}
bool operator< (const Date & lhs, const Date & rhs)
{
  if(lhs.yyyy<rhs.yyyy)
    return true;
  if(lhs.yyyy>rhs.yyyy)
    return false;
  if(lhs.mm<rhs.mm)
    return true;
  if(lhs.mm>rhs.mm)
    return false;
  if(lhs.dd<rhs.dd)
    return true;

  return false;
}
bool operator<= (const Date & lhs, const Date & rhs)
{
  if(lhs==rhs || lhs<rhs)
    return true;
  return false;
}
bool operator> (const Date & lhs, const Date & rhs)
{
  if(!(lhs<=rhs))
    return true;
  return false;
}
bool operator>= (const Date & lhs, const Date & rhs)
{
  if(!(lhs<rhs))
    return true;
  return false;
}
bool operator!= (const Date & lhs, const Date & rhs)
{
  if(!(lhs==rhs))
    return true;
  return false;
}

// Operator: <<
// Return: print out the date in form mm/dd/yyyy
std::ostream & operator<< (std::ostream & outStream, const Date & a_Date)
{
  outStream << a_Date.mm << '/' << a_Date.dd << '/' << a_Date.yyyy;
  return outStream;
}

// Operator: >>
// Return: read in mm/dd/yyyy
std::istream & operator>> (std::istream & inStream, Date & a_Date)
{
  int m, d, y; //local variable for input data
  inStream >> m;
  if(inStream.fail())
    return inStream;
  if(inStream.peek()=='/')
  {
    inStream.ignore();
    inStream >> d;
    if(inStream.fail())
      return inStream;
  }
  if(inStream.peek()=='/')
  {
    inStream.ignore();
    inStream >> y;
    if(inStream.fail())
      return inStream;
  }
  else
  {
    d=1;
    y=2017;
  }
  
  if(!valid(m, d, y))
  {
    inStream.setstate(std::ios_base::failbit);
    return inStream;
  }

  // everyhting is good
  a_Date.dd=d;
  a_Date.mm=m;
  a_Date.yyyy=y;
  return inStream;
}
// Terminate if the date was invalid
void Date::reduce()
{
  if (!valid(mm, dd, yyyy))
      throw std::range_error ("Date::reduce(): invalid date");
}
